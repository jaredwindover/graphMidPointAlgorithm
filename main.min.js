/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/drawing.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var drawCircle = function drawCircle(context, radius, point) {
	context.beginPath();
	context.arc(point.x, point.y, radius, 0, 2 * Math.PI);
	context.fill();
	context.stroke();
};

var drawLine = function drawLine(context, point, otherPoint) {
	context.beginPath();
	context.moveTo(point.x, point.y);
	context.lineTo(otherPoint.x, otherPoint.y);
	context.stroke();
};

var drawPoints = function drawPoints(context, points) {
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var point = _step.value;

			drawCircle(context, 20, point);
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
};

var drawMidPoints = function drawMidPoints(context, midPoints) {
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = midPoints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var midPoint = _step2.value;

			drawCircle(context, 10, midPoint.p);
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}
};

var drawTraces = function drawTraces(context, traces, pairs) {
	for (var i = 0; i < traces[0].length; i++) {
		for (var j = 0; j < traces.length; j++) {
			drawCircle(context, 2, traces[j][i]);
			drawLine(context, traces[j][i], traces[pairs[j]][i]);
		}
	}
};

var drawFollows = function drawFollows(context, points, pairs) {
	for (var i = 0; i < points.length; i++) {
		drawLine(context, points[i], points[pairs[i]]);
	}
};

var drawEdges = function drawEdges(context, points, edges) {
	for (var edge in edges) {
		var others = edges[edge];
		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;

		try {
			for (var _iterator3 = others[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var otherEdge = _step3.value;

				var edgePoint = points[edge];
				var otherEdgePoint = points[otherEdge];
				drawLine(context, edgePoint, otherEdgePoint);
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}
	}
};

var clear = function clear(context, _ref) {
	var height = _ref.height,
	    width = _ref.width;
	return context.clearRect(0, 0, width, height);
};

exports.default = {
	drawPoints: drawPoints,
	drawMidPoints: drawMidPoints,
	drawEdges: drawEdges,
	drawTraces: drawTraces,
	drawFollows: drawFollows,
	clear: clear
};

/***/ }),

/***/ "./js/main.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _drawing = __webpack_require__("./js/drawing.js");

var _drawing2 = _interopRequireDefault(_drawing);

var _vectors = __webpack_require__("./js/vectors.js");

var _vectors2 = _interopRequireDefault(_vectors);

var _utilities = __webpack_require__("./js/utilities.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var constants = {};

var timeStep = 0.01;
var fastForward = 1;

function resizeCanvas(canvas) {
	console.dir({
		w: window.innerWidth,
		h: window.innerHeight
	});
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
}

var init = function init() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$numPoints = _ref.numPoints,
	    numPoints = _ref$numPoints === undefined ? 5 : _ref$numPoints;

	var initPoints = function initPoints(numPoints, canvas) {
		var points = [];
		for (var i = 0; i < numPoints; i++) {
			var x = Math.random() * canvas.width;
			var y = Math.random() * canvas.height;
			points.push({ x: x, y: y });
		}
		return points;
	};

	var initTrace = function initTrace(points) {
		var traces = [];
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var point = _step.value;

				traces.push([point]);
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		return traces;
	};

	var initPairs = function initPairs(numPoints) {
		var res = {};
		for (var i = 0; i < numPoints; i++) {
			res[i] = (i + 1) % numPoints;
		}
		return res;
	};

	var canvas = document.querySelector('canvas');
	resizeCanvas(canvas);
	var context = canvas.getContext('2d');
	var points = initPoints(numPoints, canvas);
	var velocities = points.map(function () {
		return _vectors2.default.canonical.zero;
	});
	var pairs = initPairs(numPoints);
	console.log(pairs);
	var traces = initTrace(points);
	return {
		canvas: canvas,
		context: context,
		points: points,
		velocities: velocities,
		traces: traces,
		pairs: pairs
	};
};

var _init = init({ numPoints: Math.floor(Math.random() * 27) + 3 }),
    canvas = _init.canvas,
    context = _init.context,
    points = _init.points,
    velocities = _init.velocities,
    traces = _init.traces,
    pairs = _init.pairs;

var getPoint = function getPoint(v) {
	return points[v];
};

var update = function update(canvas) {

	// velocities per point
	var velocities = [];
	for (var i = 0; i < points.length; i++) {
		var point = getPoint(i);
		var otherPoint = getPoint(pairs[i]);
		velocities.push(_vectors2.default.timesScalar(_vectors2.default.difference(point, otherPoint), 1000 / Math.sqrt(_vectors2.default.squaredDistance(point, otherPoint))));
	}

	// update positions with velocities
	for (var _i = 0; _i < points.length; _i++) {
		var displacement = _vectors2.default.timesScalar(velocities[_i], timeStep);
		points[_i] = _vectors2.default.sum(points[_i], displacement);
		if (points[_i].x < constants.barrierWidth) {
			points[_i].x = constants.barrierWidth;
			velocities[_i].x = 0;
		}
		if (points[_i].x > canvas.width - constants.barrierWidth) {
			points[_i].x = canvas.width - constants.barrierWidth;
			velocities[_i].x = 0;
		}
		if (points[_i].y < constants.barrierWidth) {
			points[_i].y = constants.barrierWidth;
			velocities[_i].y = 0;
		}
		if (points[_i].y > canvas.height - constants.barrierWidth) {
			points[_i].y = canvas.height - constants.barrierWidth;
			velocities[_i].y = 0;
		}
	}

	// update traces
	for (var _i2 = 0; _i2 < points.length; _i2++) {
		traces[_i2].push(getPoint(_i2));
	}
};

function draw(context) {
	_drawing2.default.drawTraces(context, traces, pairs);
}

var iterate = function iterate(n) {
	if (n >= 0) {
		update(canvas);
		_drawing2.default.clear(context, canvas);
		draw(context);
		setTimeout(function () {
			return iterate(n - 1);
		}, 1000 * timeStep / fastForward);
	}
};

function main() {
	draw(context);
	iterate(40000);
	draw(context);
}

window.addEventListener('resize', function () {
	return resizeCanvas(canvas);
}, false);
main();

/***/ }),

/***/ "./js/utilities.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getRandomInt = getRandomInt;
function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min)) + min;
}

/***/ }),

/***/ "./js/vectors.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var difference = function difference(point, otherPoint) {
	return {
		x: otherPoint.x - point.x,
		y: otherPoint.y - point.y
	};
};

var sum = function sum(point, otherPoint) {
	return {
		x: otherPoint.x + point.x,
		y: otherPoint.y + point.y
	};
};

var divScalar = function divScalar(point, scalar) {
	return {
		x: point.x / scalar,
		y: point.y / scalar
	};
};

var timesScalar = function timesScalar(point, scalar) {
	return {
		x: point.x * scalar,
		y: point.y * scalar
	};
};

var squaredMagnitude = function squaredMagnitude(point) {
	return Math.pow(point.x, 2) + Math.pow(point.y, 2);
};

var squaredDistance = function squaredDistance(point, otherPoint) {
	return squaredMagnitude(difference(point, otherPoint));
};

var canonical = {
	zero: { x: 0, y: 0 },
	up: { x: 0, y: 1 },
	down: { x: 0, y: -1 },
	left: { x: -1, y: 0 },
	right: { x: 1, y: 0 }
};

exports.default = {
	canonical: canonical,
	difference: difference,
	sum: sum,
	divScalar: divScalar,
	timesScalar: timesScalar,
	squaredDistance: squaredDistance
};

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./js/main.js");


/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map
