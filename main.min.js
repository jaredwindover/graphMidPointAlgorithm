/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/drawing.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var drawCircle = function drawCircle(context, radius, point) {
	context.beginPath();
	context.arc(point.x, point.y, radius, 0, 2 * Math.PI);
	context.fill();
	context.stroke();
};

var drawLine = function drawLine(context, point, otherPoint) {
	context.beginPath();
	context.moveTo(point.x, point.y);
	context.lineTo(otherPoint.x, otherPoint.y);
	context.stroke();
};

var drawPoints = function drawPoints(context, points) {
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var point = _step.value;

			drawCircle(context, 20, point);
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
};

var drawMidPoints = function drawMidPoints(context, midPoints) {
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = midPoints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var midPoint = _step2.value;

			drawCircle(context, 10, midPoint.p);
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}
};

var drawEdges = function drawEdges(context, points, edges) {
	for (var edge in edges) {
		var others = edges[edge];
		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;

		try {
			for (var _iterator3 = others[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var otherEdge = _step3.value;

				var edgePoint = points[edge];
				var otherEdgePoint = points[otherEdge];
				drawLine(context, edgePoint, otherEdgePoint);
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}
	}
};

var clear = function clear(context, _ref) {
	var height = _ref.height,
	    width = _ref.width;
	return context.clearRect(0, 0, width, height);
};

exports.default = {
	drawPoints: drawPoints,
	drawMidPoints: drawMidPoints,
	drawEdges: drawEdges,
	clear: clear
};

/***/ }),

/***/ "./js/main.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _drawing = __webpack_require__("./js/drawing.js");

var _drawing2 = _interopRequireDefault(_drawing);

var _vectors = __webpack_require__("./js/vectors.js");

var _vectors2 = _interopRequireDefault(_vectors);

var _utilities = __webpack_require__("./js/utilities.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var constants = {
	attraction: 1,
	attractionDivisor: 20,
	repulsion: 100,
	barrierRepulsion: 1000,
	barrierWidth: 10,
	midPoint2MidPointRepulsion: 100,
	midPoint2PointRepulsion: 100
};

var timeStep = 0.01;
var fastForward = 1;

function resizeCanvas(canvas) {
	console.dir({
		w: window.innerWidth,
		h: window.innerHeight
	});
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
}

function getMidPoints(edges, points) {
	var getMidPoint = function getMidPoint(point, otherPoint) {
		return _vectors2.default.divScalar(_vectors2.default.sum(point, otherPoint), 2);
	};

	return edges.reduce(function (o, e, v) {
		return e.reduce(function (o, otherPointI, i) {
			o.push({ p: getMidPoint(points[v], points[otherPointI]), a: v, b: i });
			return o;
		}, o);
	}, []);
}

var init = function init() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$numPoints = _ref.numPoints,
	    numPoints = _ref$numPoints === undefined ? 20 : _ref$numPoints,
	    _ref$numEdges = _ref.numEdges,
	    numEdges = _ref$numEdges === undefined ? 50 : _ref$numEdges;

	var initPoints = function initPoints(n, canvas) {
		var points = [];
		for (var i = 0; i < n; i++) {
			points[i] = {
				x: (0, _utilities.getRandomInt)(0, canvas.width),
				y: (0, _utilities.getRandomInt)(0, canvas.height)
			};
		}
		return points;
	};

	var addHalfEdge = function addHalfEdge(edges, a, b) {
		if (!(a in edges)) {
			edges[a] = [b];
		} else {
			edges[a].push([b]);
		}
		return edges;
	};

	var initEdges = function initEdges(n, k) {
		return Array(n).fill().reduce(function (_ref2) {
			var inEdges = _ref2.inEdges,
			    outEdges = _ref2.outEdges;

			var left = (0, _utilities.getRandomInt)(0, k);
			var right = (0, _utilities.getRandomInt)(0, k - 1);
			if (right >= left) {
				right += 1;
			}
			return {
				outEdges: addHalfEdge(outEdges, left, right),
				inEdges: addHalfEdge(inEdges, right, left)
			};
		}, { inEdges: [], outEdges: [] });
	};
	var canvas = document.querySelector('canvas');
	resizeCanvas(canvas);
	var context = canvas.getContext('2d');
	var points = initPoints(numPoints, canvas);
	var velocities = points.map(function () {
		return _vectors2.default.canonical.zero;
	});
	var forces = points.map(function () {
		return _vectors2.default.canonical.zero;
	});
	var edgesPair = initEdges(numEdges, numPoints);
	var outEdges = edgesPair.outEdges,
	    inEdges = edgesPair.inEdges;

	var midPoints = getMidPoints(outEdges, points);
	return {
		canvas: canvas,
		context: context,
		points: points,
		velocities: velocities,
		forces: forces,
		outEdges: outEdges,
		inEdges: inEdges,
		midPoints: midPoints
	};
};

var _init = init(),
    canvas = _init.canvas,
    context = _init.context,
    points = _init.points,
    midPoints = _init.midPoints,
    inEdges = _init.inEdges,
    outEdges = _init.outEdges,
    forces = _init.forces,
    velocities = _init.velocities;

var getPoint = function getPoint(v) {
	return points[v];
};

var update = function update(canvas) {
	// forces per point
	for (var i = 0; i < points.length; i++) {
		var point = points[i];
		var ips = inEdges[i] == undefined ? [] : inEdges[i].map(getPoint);
		var ops = outEdges[i] == undefined ? [] : outEdges[i].map(getPoint);
		var otherPoints = ips.concat(ops);
		forces[i] = _vectors2.default.canonical.zero;
		// point on point attractive forces (edges)
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = otherPoints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var otherPoint = _step.value;

				var d2 = _vectors2.default.squaredDistance(point, otherPoint);
				var d = Math.sqrt(d2);
				if (d != 0) {
					var dir = _vectors2.default.divScalar(_vectors2.default.difference(point, otherPoint), d);
					forces[i] = _vectors2.default.sum(forces[i], _vectors2.default.timesScalar(dir, constants.attraction * Math.log(d / constants.attractionDivisor)));
				}
			}
			// point on point repulsive forces
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;

		try {
			for (var _iterator2 = points[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var _otherPoint = _step2.value;

				var _d = _vectors2.default.squaredDistance(point, _otherPoint);
				if (_d != 0) {
					var _d2 = Math.sqrt(_d);
					var _dir = _vectors2.default.divScalar(_vectors2.default.difference(point, _otherPoint), _d2);
					var newForce = _vectors2.default.timesScalar(_dir, -constants.repulsion / _d);
					forces[i] = _vectors2.default.sum(forces[i], newForce);
				}
			}
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2.return) {
					_iterator2.return();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}

		var barrierForce = function barrierForce(dir, d) {
			var d2 = Math.pow(d, 2);
			if (d2 != 0) {
				return _vectors2.default.timesScalar(dir, -constants.barrierRepulsion / d2);
			}
			return _vectors2.default.canonical.zero;
		};
		// barrier repulsive forces
		forces[i] = [barrierForce(_vectors2.default.canonical.down, point.y), barrierForce(_vectors2.default.canonical.up, canvas.height - point.y), barrierForce(_vectors2.default.canonical.left, point.x), barrierForce(_vectors2.default.canonical.right, canvas.width - point.x)].reduce(_vectors2.default.sum, forces[i]);
	}

	// midPoint forces
	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = midPoints[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var midPoint = _step3.value;

			var mp = midPoint.p;
			// midPoint on midPoint repulsive forces
			var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = midPoints[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var otherMidPoint = _step4.value;

					var omp = otherMidPoint.p;
					var _d3 = _vectors2.default.squaredDistance(mp, omp);
					if (_d3 != 0) {
						var _d4 = Math.sqrt(_d3);
						var _dir2 = _vectors2.default.divScalar(_vectors2.default.difference(mp, omp), _d4);
						var _newForce = _vectors2.default.timesScalar(_dir2, -constants.midPoint2MidPointRepulsion / (2 * _d3));
						forces[midPoint.a] = _vectors2.default.sum(forces[midPoint.a], _newForce);
						forces[midPoint.b] = _vectors2.default.sum(forces[midPoint.b], _newForce);
					}
				}
				// point on midPoint repulsive forces
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4.return) {
						_iterator4.return();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}

			var _iteratorNormalCompletion5 = true;
			var _didIteratorError5 = false;
			var _iteratorError5 = undefined;

			try {
				for (var _iterator5 = points[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
					var _otherPoint2 = _step5.value;

					var _d5 = _vectors2.default.squaredDistance(mp, _otherPoint2);
					if (_d5 != 0) {
						var _d6 = Math.sqrt(_d5);
						var _dir3 = _vectors2.default.divScalar(_vectors2.default.difference(mp, _otherPoint2), _d6);
						var _newForce2 = _vectors2.default.timesScalar(_dir3, -constants.midPoint2PointRepulsion / (2 * _d5));
						forces[midPoint.a] = _vectors2.default.sum(forces[midPoint.a], _newForce2);
						forces[midPoint.b] = _vectors2.default.sum(forces[midPoint.b], _newForce2);
					}
				}
			} catch (err) {
				_didIteratorError5 = true;
				_iteratorError5 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion5 && _iterator5.return) {
						_iterator5.return();
					}
				} finally {
					if (_didIteratorError5) {
						throw _iteratorError5;
					}
				}
			}
		}

		// update velocities with forces
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}

	for (var _i = 0; _i < points.length; _i++) {
		velocities[_i] = _vectors2.default.sum(velocities[_i], forces[_i]);
	}

	// update positions with velocities
	for (var _i2 = 0; _i2 < points.length; _i2++) {
		var displacement = _vectors2.default.timesScalar(velocities[_i2], timeStep);
		points[_i2] = _vectors2.default.sum(points[_i2], displacement);
		if (points[_i2].x < constants.barrierWidth) {
			points[_i2].x = constants.barrierWidth;
			velocities[_i2].x = 0;
		}
		if (points[_i2].x > canvas.width - constants.barrierWidth) {
			points[_i2].x = canvas.width - constants.barrierWidth;
			velocities[_i2].x = 0;
		}
		if (points[_i2].y < constants.barrierWidth) {
			points[_i2].y = constants.barrierWidth;
			velocities[_i2].y = 0;
		}
		if (points[_i2].y > canvas.height - constants.barrierWidth) {
			points[_i2].y = canvas.height - constants.barrierWidth;
			velocities[_i2].y = 0;
		}
	}

	// update midPoint positions
	midPoints = getMidPoints(outEdges, points);
};

function draw(context) {
	context.fillStyle = 'red';
	_drawing2.default.drawPoints(context, points);
	_drawing2.default.drawEdges(context, points, outEdges);
	context.fillStyle = 'blue';
	_drawing2.default.drawMidPoints(context, midPoints);
}

var iterate = function iterate(n) {
	if (n >= 0) {
		update(canvas);
		_drawing2.default.clear(context, canvas);
		draw(context);
		setTimeout(function () {
			return iterate(n - 1);
		}, 1000 * timeStep / fastForward);
	}
};

function main() {
	draw(context);
	iterate(40000);
	draw(context);
}

window.addEventListener('resize', function () {
	return resizeCanvas(canvas);
}, false);
main();

/***/ }),

/***/ "./js/utilities.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getRandomInt = getRandomInt;
function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min)) + min;
}

/***/ }),

/***/ "./js/vectors.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var difference = function difference(point, otherPoint) {
	return {
		x: otherPoint.x - point.x,
		y: otherPoint.y - point.y
	};
};

var sum = function sum(point, otherPoint) {
	return {
		x: otherPoint.x + point.x,
		y: otherPoint.y + point.y
	};
};

var divScalar = function divScalar(point, scalar) {
	return {
		x: point.x / scalar,
		y: point.y / scalar
	};
};

var timesScalar = function timesScalar(point, scalar) {
	return {
		x: point.x * scalar,
		y: point.y * scalar
	};
};

var squaredMagnitude = function squaredMagnitude(point) {
	return Math.pow(point.x, 2) + Math.pow(point.y, 2);
};

var squaredDistance = function squaredDistance(point, otherPoint) {
	return squaredMagnitude(difference(point, otherPoint));
};

var canonical = {
	zero: { x: 0, y: 0 },
	up: { x: 0, y: 1 },
	down: { x: 0, y: -1 },
	left: { x: -1, y: 0 },
	right: { x: 1, y: 0 }
};

exports.default = {
	canonical: canonical,
	difference: difference,
	sum: sum,
	divScalar: divScalar,
	timesScalar: timesScalar,
	squaredDistance: squaredDistance
};

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./js/main.js");


/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map